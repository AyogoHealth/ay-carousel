var AyCarousel = (function () {
    function AyCarousel() {
        var _this = this;
        this.startX = 0;
        this.callbacks = {};
        this.index = 0;
        this.SNAPPINESS = 40;
        this.carousel = document.querySelector('.carousel');
        this.carousel.addEventListener('click', function (e) { return _this.onclick(e); });
        this.carousel.addEventListener('touchstart', function (e) { return _this.ondragstart(e); });
        this.carousel.addEventListener('mousedown', function (e) { return _this.ondragstart(e); });
        this.cards = this.carousel.children;
        this.cardWidth = this.cards[0].offsetWidth + this.cards[0].offsetLeft;
        this.carousel.addEventListener('transitionend', function () {
            _this.rescale();
        });
        this.rescale();
        document.getElementById('right').addEventListener('click', this.move.bind(this, undefined, 'right'));
        document.getElementById('left').addEventListener('click', this.move.bind(this, undefined, 'left'));
    }
    AyCarousel.prototype.ondragstart = function (e) {
        var _this = this;
        var touches = e.touches ? e.touches[0] : e;
        var pageX = touches.pageX, pageY = touches.pageY;
        var boundingRect = this.cards[this.index].getBoundingClientRect();
        this.offset = {
            x: pageX - boundingRect.left,
            y: pageY - boundingRect.top
        };
        this.delta = {};
        this.position = {
            x: this.carousel.offsetLeft,
            y: this.carousel.offsetTop
        };
        var edgeToCardDist = this.cards[this.index].getBoundingClientRect().left;
        this.lastTranslate = this.carousel.getBoundingClientRect().left - edgeToCardDist;
        this.startX = e.pageX;
        this.dragging = undefined;
        this.callbacks.onmove = function (e) { return _this.ondragmove(e); };
        this.callbacks.onend = function (e) { return _this.ondragend(e); };
        this.carousel.addEventListener('mousemove', this.callbacks.onmove);
        this.carousel.addEventListener('touchmove', this.callbacks.onmove);
        this.carousel.addEventListener('touchend', this.callbacks.onend);
        this.carousel.addEventListener('mouseup', this.callbacks.onend);
        this.carousel.addEventListener('mouseleave', this.callbacks.onend);
    };
    AyCarousel.prototype.ondragmove = function (e) {
        var touches = e.touches ? e.touches[0] : e;
        var pageX = touches.pageX, pageY = touches.pageY;
        this.delta = {
            x: pageX - this.position.x,
            y: pageY - this.position.y
        };
        if (typeof this.dragging === 'undefined') {
            this.dragging = !(this.dragging || Math.abs(this.delta.x) < Math.abs(this.delta.y));
        }
        else if (!this.dragging) {
            this.dragging = Math.abs(this.delta.x) > Math.abs(this.delta.y);
        }
        if (this.dragging && this.offset) {
            e.preventDefault();
            var currentTranslate = this.delta.x + this.lastTranslate - this.offset.x;
            this.translate(currentTranslate, 0, null);
            var cardMidpoint = (this.cards[this.index].getBoundingClientRect().left + this.cards[this.index].getBoundingClientRect().right) / 2;
            var viewportWidth = window.innerWidth;
            if (cardMidpoint <= 0 + this.SNAPPINESS) {
                this.index = Math.min(this.index + 1, this.cards.length - 1);
            }
            else if (cardMidpoint > viewportWidth - this.SNAPPINESS) {
                this.index = Math.max(this.index - 1, 0);
            }
        }
    };
    AyCarousel.prototype.move = function (nextIndex, direction) {
        if (direction) {
            direction == 'right' ? nextIndex = this.index + 1 : nextIndex = this.index - 1;
        }
        nextIndex = Math.min(Math.max(nextIndex, 0), this.cards.length - 1);
        this.index = nextIndex;
        var container = this.carousel.parentElement;
        var containerWidth = container.offsetWidth;
        var containerMargin = parseInt(window.getComputedStyle(container).marginLeft, 0);
        var card = this.cards[nextIndex];
        var edgeToCardDist = (containerWidth - card.offsetWidth) / 2;
        var nextOffset = Math.min((card.offsetLeft - edgeToCardDist + containerMargin) * -1, 0);
        var ease = 'cubic-bezier(0.785, 0.135, 0.15, 0.86)';
        this.translate(nextOffset, 300, ease);
    };
    AyCarousel.prototype.ondragend = function (e) {
        this.position = {
            x: e.target.offsetLeft,
            y: e.target.offsetTop
        };
        this.carousel.removeEventListener('mousemove', this.callbacks.onmove);
        this.carousel.removeEventListener('touchmove', this.callbacks.onmove);
        this.carousel.removeEventListener('touchend', this.callbacks.onend);
        this.carousel.removeEventListener('mouseup', this.callbacks.onend);
        this.carousel.removeEventListener('mouseleave', this.callbacks.onend);
        this.dragging = undefined;
        this.move(this.index, undefined);
        this.rescale();
    };
    AyCarousel.prototype.onclick = function (e) {
        if (this.delta.x) {
            e.preventDefault();
        }
    };
    AyCarousel.prototype.translate = function (x, length, fn) {
        this.carousel.style['transition'] = 'transform';
        this.carousel.style['transitionTimingFunction'] = fn;
        this.carousel.style['transitionDuration'] = length + "ms";
        this.carousel.style['transform'] = "translate3d(" + x + "px,0px,0px)";
        this.rescale();
    };
    AyCarousel.prototype.percentVisible = function (card) {
        var cardRect = card.getBoundingClientRect();
        var cardWidth = card.offsetWidth;
        var frameWidth = window.innerWidth;
        if ((cardRect.left < 0 && cardRect.right < 0) || cardRect.left > frameWidth) {
            return 0;
        }
        else if (cardRect.left < 0) {
            return cardRect.right / cardWidth;
        }
        else if (cardRect.right > frameWidth) {
            return (frameWidth - cardRect.left) / cardWidth;
        }
        else {
            return 1;
        }
    };
    AyCarousel.prototype.rescale = function () {
        var from = Math.max(this.index - 2, 0);
        var to = Math.min(this.index + 2, this.cards.length - 1);
        for (var i = from; i <= to; i++) {
            var scaler = Math.max(this.percentVisible(this.cards[i]), 0.9);
            this.cards[i].style['transform'] = "scale(" + scaler + ")";
            this.cards[i].style['transitionTimingFunction'] = 'ease';
            this.cards[i].style['transitionDuration'] = "250ms";
        }
    };
    return AyCarousel;
}());
new AyCarousel();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFlRTtRQUFBLGlCQWtCQztRQTlCRCxXQUFNLEdBQVksQ0FBQyxDQUFDO1FBS3BCLGNBQVMsR0FBUyxFQUFFLENBQUM7UUFHckIsVUFBSyxHQUFZLENBQUMsQ0FBQztRQUVWLGVBQVUsR0FBWSxFQUFFLENBQUM7UUFHaEMsSUFBSSxDQUFDLFFBQVEsR0FBZ0IsUUFBUSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUVqRSxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxVQUFBLENBQUMsSUFBSSxPQUFBLEtBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQWYsQ0FBZSxDQUFDLENBQUM7UUFDOUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsVUFBQSxDQUFDLElBQUksT0FBQSxLQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFuQixDQUFtQixDQUFDLENBQUM7UUFDdkUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsVUFBQSxDQUFDLElBQUksT0FBQSxLQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFuQixDQUFtQixDQUFDLENBQUM7UUFFdEUsSUFBSSxDQUFDLEtBQUssR0FBUSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQztRQUV6QyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDO1FBRXRFLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxFQUFFO1lBQzlDLEtBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNq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TSxHQUFDLENBQUMsQ0FBQyxDQUFBO1FBRXRELEdBQUcsQ0FBQSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLElBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDN0IsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUUvRCxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsR0FBRyxXQUFTLE1BQU0sTUFBRyxDQUFDO1lBQ3RELElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLDBCQUEwQixDQUFDLEdBQUcsTUFBTSxDQUFDO1lBQ3pELElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLEdBQUcsT0FBTyxDQUFDO1FBQ3RELENBQUM7SUFDSCxDQUFDO0lBQ0gsaUJBQUM7QUFBRCxDQUFDLEFBL0xELElBK0xDO0FBQ0QsSUFBSSxVQUFVLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIEF5Q2Fyb3VzZWwge1xuICBkcmFnZ2luZyA6IGJvb2xlYW47XG4gIG9mZnNldCA6IGFueTtcbiAgc3RhcnRYIDogbnVtYmVyID0gMDtcbiAgZGVsdGEgOiBhbnk7XG4gIHBvc2l0aW9uIDogYW55O1xuICBjdXJyZW50VHJhbnNsYXRlIDogbnVtYmVyO1xuICBsYXN0VHJhbnNsYXRlIDogbnVtYmVyO1xuICBjYWxsYmFja3MgOiBhbnkgPSB7fTtcbiAgY2FyZHMgOiBIVE1MRWxlbWVudFtdO1xuICBjYXJkV2lkdGggOiBudW1iZXI7XG4gIGluZGV4IDogbnVtYmVyID0gMDtcbiAgY2Fyb3VzZWwgOiBIVE1MRWxlbWVudDtcbiAgcmVhZG9ubHkgU05BUFBJTkVTUyA6IG51bWJlciA9IDQwO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY2Fyb3VzZWwgPSA8SFRNTEVsZW1lbnQ+ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhcm91c2VsJyk7XG4gICAgXG4gICAgdGhpcy5jYXJvdXNlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4gdGhpcy5vbmNsaWNrKGUpKTtcbiAgICB0aGlzLmNhcm91c2VsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBlID0+IHRoaXMub25kcmFnc3RhcnQoZSkpO1xuICAgIHRoaXMuY2Fyb3VzZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZSA9PiB0aGlzLm9uZHJhZ3N0YXJ0KGUpKTtcblxuICAgIHRoaXMuY2FyZHMgPSA8YW55PnRoaXMuY2Fyb3VzZWwuY2hpbGRyZW47XG5cbiAgICB0aGlzLmNhcmRXaWR0aCA9IHRoaXMuY2FyZHNbMF0ub2Zmc2V0V2lkdGggKyB0aGlzLmNhcmRzWzBdLm9mZnNldExlZnQ7XG5cbiAgICB0aGlzLmNhcm91c2VsLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCAoKSA9PiB7XG4gICAgICB0aGlzLnJlc2NhbGUoKTtcbiAgICB9KTtcbiAgICB0aGlzLnJlc2NhbGUoKTtcbiAgICBcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmlnaHQnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMubW92ZS5iaW5kKHRoaXMsIHVuZGVmaW5lZCwgJ3JpZ2h0JykpO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsZWZ0JykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm1vdmUuYmluZCh0aGlzLCB1bmRlZmluZWQsICdsZWZ0JykpOyAgIFxuICB9XG5cbiAgb25kcmFnc3RhcnQoZSkge1xuICAgIGNvbnN0IHRvdWNoZXMgPSAgZS50b3VjaGVzID8gZS50b3VjaGVzWzBdIDogZTtcbiAgICBjb25zdCB7cGFnZVgsIHBhZ2VZfSA9IHRvdWNoZXM7XG5cbiAgICBjb25zdCBib3VuZGluZ1JlY3QgPSB0aGlzLmNhcmRzW3RoaXMuaW5kZXhdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHRoaXMub2Zmc2V0ID0ge1xuICAgICAgeDogcGFnZVggLSBib3VuZGluZ1JlY3QubGVmdCxcbiAgICAgIHk6IHBhZ2VZIC0gYm91bmRpbmdSZWN0LnRvcFxuICAgIH07XG5cbiAgICB0aGlzLmRlbHRhID0ge307XG5cbiAgICB0aGlzLnBvc2l0aW9uID0ge1xuICAgICAgeDogdGhpcy5jYXJvdXNlbC5vZmZzZXRMZWZ0LFxuICAgICAgeTogdGhpcy5jYXJvdXNlbC5vZmZzZXRUb3BcbiAgICB9O1xuXG4gICAgbGV0IGVkZ2VUb0NhcmREaXN0ID0gdGhpcy5jYXJkc1t0aGlzLmluZGV4XS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuICAgIHRoaXMubGFzdFRyYW5zbGF0ZSA9IHRoaXMuY2Fyb3VzZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtIGVkZ2VUb0NhcmREaXN0O1xuXG4gICAgdGhpcy5zdGFydFggPSBlLnBhZ2VYO1xuICAgIHRoaXMuZHJhZ2dpbmcgPSB1bmRlZmluZWQ7XG5cbiAgICB0aGlzLmNhbGxiYWNrcy5vbm1vdmUgPSBlID0+IHRoaXMub25kcmFnbW92ZShlKTtcbiAgICB0aGlzLmNhbGxiYWNrcy5vbmVuZCA9IGUgPT4gdGhpcy5vbmRyYWdlbmQoZSk7XG4gICAgXG4gICAgdGhpcy5jYXJvdXNlbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLmNhbGxiYWNrcy5vbm1vdmUpO1xuICAgIHRoaXMuY2Fyb3VzZWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5jYWxsYmFja3Mub25tb3ZlKTtcbiAgICBcbiAgICB0aGlzLmNhcm91c2VsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5jYWxsYmFja3Mub25lbmQpO1xuICAgIHRoaXMuY2Fyb3VzZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuY2FsbGJhY2tzLm9uZW5kKTtcbiAgICB0aGlzLmNhcm91c2VsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCB0aGlzLmNhbGxiYWNrcy5vbmVuZCk7XG4gIH1cblxuICBvbmRyYWdtb3ZlKGUpIHtcbiAgICBjb25zdCB0b3VjaGVzID0gIGUudG91Y2hlcyA/IGUudG91Y2hlc1swXSA6IGU7XG4gICAgY29uc3Qge3BhZ2VYLCBwYWdlWX0gPSB0b3VjaGVzO1xuXG4gICAgdGhpcy5kZWx0YSA9IHtcbiAgICAgIHg6IHBhZ2VYIC0gdGhpcy5wb3NpdGlvbi54LFxuICAgICAgeTogcGFnZVkgLSB0aGlzLnBvc2l0aW9uLnlcbiAgICB9O1xuXG4gICAgaWYodHlwZW9mIHRoaXMuZHJhZ2dpbmcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLmRyYWdnaW5nID0gISh0aGlzLmRyYWdnaW5nIHx8IE1hdGguYWJzKHRoaXMuZGVsdGEueCkgPCBNYXRoLmFicyh0aGlzLmRlbHRhLnkpKTtcbiAgICB9IGVsc2UgaWYoIXRoaXMuZHJhZ2dpbmcpIHtcbiAgICAgIHRoaXMuZHJhZ2dpbmcgPSBNYXRoLmFicyh0aGlzLmRlbHRhLngpID4gTWF0aC5hYnModGhpcy5kZWx0YS55KTtcbiAgICB9XG5cbiAgICBpZih0aGlzLmRyYWdnaW5nICYmIHRoaXMub2Zmc2V0KSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBcbiAgICAgIGNvbnN0IGN1cnJlbnRUcmFuc2xhdGUgPSB0aGlzLmRlbHRhLnggKyB0aGlzLmxhc3RUcmFuc2xhdGUgLSB0aGlzLm9mZnNldC54O1xuXG4gICAgICB0aGlzLnRyYW5zbGF0ZShjdXJyZW50VHJhbnNsYXRlLCAwLCBudWxsKTtcblxuICAgICAgbGV0IGNhcmRNaWRwb2ludCA9ICh0aGlzLmNhcmRzW3RoaXMuaW5kZXhdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgKyB0aGlzLmNhcmRzW3RoaXMuaW5kZXhdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnJpZ2h0KSAvIDI7XG4gICAgICBsZXQgdmlld3BvcnRXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuXG4gICAgICBpZihjYXJkTWlkcG9pbnQgPD0gMCArIHRoaXMuU05BUFBJTkVTUykge1xuICAgICAgICB0aGlzLmluZGV4ID0gTWF0aC5taW4odGhpcy5pbmRleCsxLCB0aGlzLmNhcmRzLmxlbmd0aC0xKTtcbiAgICAgIH0gZWxzZSBpZihjYXJkTWlkcG9pbnQgPiB2aWV3cG9ydFdpZHRoIC0gdGhpcy5TTkFQUElORVNTKSB7XG4gICAgICAgIHRoaXMuaW5kZXggPSBNYXRoLm1heCh0aGlzLmluZGV4LTEsIDApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG1vdmUobmV4dEluZGV4LCBkaXJlY3Rpb24pIHtcbiAgICBpZihkaXJlY3Rpb24pIHtcbiAgICAgIGRpcmVjdGlvbiA9PSAncmlnaHQnID8gbmV4dEluZGV4ID0gdGhpcy5pbmRleCsxIDogbmV4dEluZGV4ID0gdGhpcy5pbmRleC0xO1xuICAgIH1cbiAgICBuZXh0SW5kZXggPSBNYXRoLm1pbihNYXRoLm1heChuZXh0SW5kZXgsIDApLCB0aGlzLmNhcmRzLmxlbmd0aCAtIDEpO1xuICAgIHRoaXMuaW5kZXggPSBuZXh0SW5kZXg7XG5cbiAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNhcm91c2VsLnBhcmVudEVsZW1lbnQ7XG4gICAgY29uc3QgY29udGFpbmVyV2lkdGggPSBjb250YWluZXIub2Zmc2V0V2lkdGg7XG4gICAgY29uc3QgY29udGFpbmVyTWFyZ2luID0gcGFyc2VJbnQod2luZG93LmdldENvbXB1dGVkU3R5bGUoY29udGFpbmVyKS5tYXJnaW5MZWZ0LCAwKTtcbiAgXG4gICAgY29uc3QgY2FyZCA9IHRoaXMuY2FyZHNbbmV4dEluZGV4XTtcblxuICAgIC8vIFdpZHRoIG9mIGNvbnRhaW5lciAtIFdpZHRoIG9mIGNhcmQgPSBBbGwgdGhlIGV4dHJhIHNwYWNlXG4gICAgLy8gRGl2aWRlIHRoaXMgYnkgMiB0byBnZXQgZGVzaXJlZCBkaXN0YW5jZSBmcm9tIGVkZ2Ugb24gZWl0aGVyIHNpZGUgb2YgY2FyZFxuICAgIGNvbnN0IGVkZ2VUb0NhcmREaXN0ID0gKGNvbnRhaW5lcldpZHRoIC0gY2FyZC5vZmZzZXRXaWR0aCkvMjtcbiAgICBcbiAgICAvLyBUcmFuc2xhdGluZyB0byB0aGUgbGVmdCBvZiB0aGUgZGVzaXJlZCBjYXJkLCBtaW51cyBvdXIgZGVzaXJlZCBlZGdlIGRpc3RcbiAgICAvLyBNdWx0aXBsaWVkIGJ5IC0xIGJlY2F1c2Ugd2UgYXJlIHRyYW5zbGF0aW5nIHRvIHRoZSByaWdodFxuICAgIGNvbnN0IG5leHRPZmZzZXQgPSBNYXRoLm1pbigoY2FyZC5vZmZzZXRMZWZ0IC0gZWRnZVRvQ2FyZERpc3QgKyBjb250YWluZXJNYXJnaW4pICogLTEsIDApO1xuXG4gICAgLy8gaHR0cDovL2Vhc2luZ3MubmV0LyNlYXNlSW5PdXRDaXJjXG4gICAgY29uc3QgZWFzZSA9ICdjdWJpYy1iZXppZXIoMC43ODUsIDAuMTM1LCAwLjE1LCAwLjg2KSc7XG4gICAgdGhpcy50cmFuc2xhdGUobmV4dE9mZnNldCwgMzAwLCBlYXNlKTtcbiAgfVxuXG4gIG9uZHJhZ2VuZChlKSB7XG4gICAgdGhpcy5wb3NpdGlvbiA9IHtcbiAgICAgIHg6IGUudGFyZ2V0Lm9mZnNldExlZnQsXG4gICAgICB5OiBlLnRhcmdldC5vZmZzZXRUb3BcbiAgICB9O1xuXG4gICAgdGhpcy5jYXJvdXNlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLmNhbGxiYWNrcy5vbm1vdmUpO1xuICAgIHRoaXMuY2Fyb3VzZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5jYWxsYmFja3Mub25tb3ZlKTtcbiAgICBcbiAgICB0aGlzLmNhcm91c2VsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJyx0aGlzLmNhbGxiYWNrcy5vbmVuZCk7XG4gICAgdGhpcy5jYXJvdXNlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5jYWxsYmFja3Mub25lbmQpO1xuICAgIHRoaXMuY2Fyb3VzZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHRoaXMuY2FsbGJhY2tzLm9uZW5kKTtcblxuICAgIHRoaXMuZHJhZ2dpbmcgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5tb3ZlKHRoaXMuaW5kZXgsIHVuZGVmaW5lZCk7XG5cbiAgICB0aGlzLnJlc2NhbGUoKTtcbiAgfVxuXG4gIG9uY2xpY2soZSkge1xuICAgIGlmKHRoaXMuZGVsdGEueCkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfVxuXG4gIHRyYW5zbGF0ZSh4LCBsZW5ndGgsIGZuKSB7XG4gICAgdGhpcy5jYXJvdXNlbC5zdHlsZVsndHJhbnNpdGlvbiddID0gJ3RyYW5zZm9ybSc7XG4gICAgdGhpcy5jYXJvdXNlbC5zdHlsZVsndHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uJ10gPSBmbjtcbiAgICB0aGlzLmNhcm91c2VsLnN0eWxlWyd0cmFuc2l0aW9uRHVyYXRpb24nXSA9IGAke2xlbmd0aH1tc2A7XG4gICAgdGhpcy5jYXJvdXNlbC5zdHlsZVsndHJhbnNmb3JtJ10gPSBgdHJhbnNsYXRlM2QoJHt4fXB4LDBweCwwcHgpYDtcblxuICAgIHRoaXMucmVzY2FsZSgpO1xuICB9XG5cbiAgcGVyY2VudFZpc2libGUoY2FyZCkge1xuICAgIGxldCBjYXJkUmVjdCA9IGNhcmQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgbGV0IGNhcmRXaWR0aCA9IGNhcmQub2Zmc2V0V2lkdGg7XG4gICAgbGV0IGZyYW1lV2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcblxuICAgIGlmKChjYXJkUmVjdC5sZWZ0IDwgMCAmJiBjYXJkUmVjdC5yaWdodCA8IDApIHx8IGNhcmRSZWN0LmxlZnQgPiBmcmFtZVdpZHRoKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9IGVsc2UgaWYoY2FyZFJlY3QubGVmdCA8IDApIHtcbiAgICAgIHJldHVybiBjYXJkUmVjdC5yaWdodC9jYXJkV2lkdGg7XG4gICAgfSBlbHNlIGlmKGNhcmRSZWN0LnJpZ2h0ID4gZnJhbWVXaWR0aCkge1xuICAgICAgcmV0dXJuIChmcmFtZVdpZHRoIC0gY2FyZFJlY3QubGVmdCkvY2FyZFdpZHRoO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gIH1cblxuICByZXNjYWxlKCkge1xuICAgIC8vIFJlc2NhbGUgY3VycmVudCBjYXJkIGFuZCAyIGNhcmRzIGluIGVpdGhlciBkaXJlY3Rpb25cbiAgICBjb25zdCBmcm9tID0gTWF0aC5tYXgodGhpcy5pbmRleC0yICwwKTtcbiAgICBjb25zdCB0byA9IE1hdGgubWluKHRoaXMuaW5kZXgrMiwgdGhpcy5jYXJkcy5sZW5ndGgtMSlcblxuICAgIGZvcihsZXQgaSA9IGZyb207IGk8PXRvOyBpKyspIHtcbiAgICAgIGxldCBzY2FsZXIgPSBNYXRoLm1heCh0aGlzLnBlcmNlbnRWaXNpYmxlKHRoaXMuY2FyZHNbaV0pLCAwLjkpO1xuXG4gICAgICB0aGlzLmNhcmRzW2ldLnN0eWxlWyd0cmFuc2Zvcm0nXSA9IGBzY2FsZSgke3NjYWxlcn0pYDtcbiAgICAgIHRoaXMuY2FyZHNbaV0uc3R5bGVbJ3RyYW5zaXRpb25UaW1pbmdGdW5jdGlvbiddID0gJ2Vhc2UnO1xuICAgICAgdGhpcy5jYXJkc1tpXS5zdHlsZVsndHJhbnNpdGlvbkR1cmF0aW9uJ10gPSBgMjUwbXNgO1xuICAgIH1cbiAgfVxufVxubmV3IEF5Q2Fyb3VzZWwoKTsiXX0=